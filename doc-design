1. 通信协议设计
a. 类似于TCP/UDP协议，必要的一些辅助字段，比如数据长度等。
	TCP:
b. checksum的必要性不大，相比于网络的不可靠，共享内存的读写是可靠的，所以类似网络协议的checksum不太必要。
c. 元信息透传，这个是可选项。好处是提供了一个额外的层级来透传协议控制信息，或者暴露给用户也能在业务payload外有透传一些信息的空间。

2. 线程模型和通信模型的设计
a. 底层的通信模型支持全双工还是半双工工作。
	Full duplex
b. 是否支持多信道。(以下为可选项)
	i. 最底层支持多信道
	ii. 最底层支持单信道，通过通信协议设计支持多信道。类似tcp vs http2的关系。
c. 多线程通信的支持。(以下为可选项)
	i. 底层支持多线程
	ii. 底层支持单线程，构建事件驱动通信。上层再利用线程池和队列实现多线程支持。
d. 在a&b&c确定的基础上，如何设计数据结构，如何使用共享内存资源来构建通信关系。

3. 编程API的设计 (以下为可选项)
a. 如果要对齐socket接口，可以考虑参考posix socket api (偏底层，通用性强，但是留给用户的工作更多)
	socket()/bind()/listen()/connect()/accept()/send()/recv()/sendto()/recvfrom()/close()/gethostbyname()/gethostbyaddr()/select()/poll()/getsockopt/setsockopt
b. 提供rpc语义(偏上层、用户体验好，用户容易上手，但是定制性弱)
	i. 用户idl或实现的编程语言的函数声明
	ii. 框架通过代码生成或者动态代理提供函数实现 (具体取决于具体编程语言特性)
c. 结合a&b, 提供2个层级的接口(功能最丰富全面、但工作量较大)
